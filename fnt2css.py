from xml.dom.minidom import parse
import os

def convert_font(font):
	fnt = parse(font)
	base_name = '.'.join(font.split('.')[:-1])
	css_name = base_name + '.css'
	class_name = base_name.split('/')[-1]

	base = int(fnt.getElementsByTagName('common')[0].getAttribute('base'))
	lineHeight = int(fnt.getElementsByTagName('common')[0].getAttribute('lineHeight'))
	size = int(fnt.getElementsByTagName('info')[0].getAttribute('size'))
	chars = fnt.getElementsByTagName('char')

	css = open(css_name, 'wb')

	css.write('''
/* generated by fnt2css, it is not very wise to modify this file! */
.font.font-%(class_name)s
{
	background-image: none !important;
}

.font.font-%(class_name)s glyph
{
	background-repeat: no-repeat;
	display: inline-block;
	position: relative;
	vertical-align: baseline;
	font-size: %(size)dpx;
}''' % locals())

	for char in chars:
		id       = int(char.getAttribute('id'))
		x        = int(char.getAttribute('x'))
		y        = int(char.getAttribute('y'))
		width    = int(char.getAttribute('width'))
		height   = int(char.getAttribute('height'))
		xoffset  = int(char.getAttribute('xoffset'))
		yoffset  = int(char.getAttribute('yoffset'))
		xadvance = int(char.getAttribute('xadvance'))
		letter   = char.getAttribute('letter')

		char = ord(letter)

		margin_right = -(width - xadvance)
		margin_bottom=-height-yoffset+base#-height-yoffset+base# + lineHeight #-height#yoffset-base
		margin_top=lineHeight-size

		style = u'''.font.font-%(class_name)s glyph.glyph-%(char)s
{
	background : url(%(class_name)s.png);
	background-position: -%(x)dpx -%(y)spx;
	width: %(width)dpx;
	height: %(height)dpx;
	left: %(xoffset)dpx;
	margin-bottom: %(margin_bottom)dpx;
	margin-right: %(margin_right)spx;
	margin-top: %(margin_top)dpx;
}

.font.font-%(class_name)s glyph.glyph-%(char)s o { display: none; }''' % locals()

		css.write(style.encode('utf-8'))


fonts = filter(lambda x: x[-4:] == '.fnt', os.listdir('fonts'))
fonts = map(lambda x: os.path.join('fonts', x), fonts)

for font in fonts:
	convert_font(font)

